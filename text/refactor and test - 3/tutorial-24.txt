Будем писать тесты для компонентов используя React Testing Library!

    npm install --save-dev @testing-library/react @testing-library/dom

в папке config > jest > создаем setupTests.ts
    import '@testing-library/jest-dom';

а в jest.config.ts добовляем
          setupFilesAfterEnv: ['<rootDir>config/jest/setupTests.ts']

в tsconfig.json
    {
      "compilerOptions": {
        "outDir": "./dist/",
        "noImplicitAny": true,
        "module": "esnext",
        "target": "es5",
        "jsx": "react-jsx",
        "allowJs": true,
        "moduleResolution": "node",
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "baseUrl": ".",
        "paths": {
          "*": ["./src/*"]
        },
        "types": ["@testing-library/jest-dom"] // - эту строку
      },
      "ts-node": {
        "compilerOptions": {
          "module": "CommonJS"
        }
      },
      "include": [
        "./config/jest/setupTests.ts"
        "./src/**/*.ts",
      "./src/**/*.tsx"
      ] // - эту строку
    }


Теперь пробуем написать тест на кнопку

    import { render, screen } from '@testing-library/react';
    import { Button } from 'shared/ui/Button/Button';


    describe('classNames', () => {
      test('with only first param', () => {
        render(<Button>TEST</Button>)
        expect(screen.getByText('TEST')).toBeInTheDocument();
      });
    });

Но он не пройдет так как будет рушаться на babel! Для этого: npm install --save-dev @babel/preset-typescript
npm i -D @babel/preset-react

А в babel.config.json добовлем:  "@babel/preset-react"
   {
     "presets": ["@babel/preset-env", "@babel/preset-typescript", ["@babel/preset-react", {
       "runtime": "automatic"
     }]]
   }

теперь  npm run unit Button.test.ts у нас падает новая ошибка что не узнает scss модули

для этого npm install --save-dev identity-obj-proxy
   и jest.config.ts добовляем
      moduleNameMapper: {
        '\\.(s?css)$': 'identity-obj-proxy',
      },


Теперь тест проходит!

Далее тестируем sidebar:

    import { render, screen } from '@testing-library/react';
    import { Sidebar } from './Sidebar';

    describe('Sidebar', () => {
      test('Test render', () => {
        render(<Sidebar/>)
        expect(screen.getByText('TEST')).toBeInTheDocument();
      });
    });

но тест падает так как там мы используем icon для этого в jest.config.ts

      moduleNameMapper: {
        '\\.(s?css)$': 'identity-obj-proxy',
        '\\.svg': path.resolve(__dirname, 'jestEmptyComponent.tsx'), // добавляем эту строку
      },

  и в папке jest создаем файл jestEmptyComponent.tsx

    import React from 'react';


    const jestEmptyComponent = function () {
      return <div/>
    }

    export default jestEmptyComponent;


Это иы создали mapper чтоб для svg преаброзовал в компоненту.

У меня все работает но в видео нет и для этого npm i -D regenerator-runtime
и в setupTests.ts :

    import '@testing-library/jest-dom';
    import 'regenerator-runtime/runtime'; // +


Теперь тесты отрабатывают но с warning для этого
    в папке shared>config>i18n> i18nForTests.ts

        import i18n from 'i18next';
        import { initReactI18next } from 'react-i18next';

        i18n
          .use(initReactI18next)
          .init({
            lng: 'ru',
            fallbackLng: 'ru',
            debug: true,

            interpolation: {
              escapeValue: false, // not needed for react!!
            },

            resources: { ru: { translations: {} } },
          });

        export default i18n;

 в папке shared>lib> создаем папку tests > renderWithTranslation > renderWithTranslation.tsx

    import { ReactNode } from 'react';
    import { render } from '@testing-library/react';
    import { I18nextProvider } from 'react-i18next';
    import i18nForTests from 'shared/config/i18n/i18nForTests';


    export function renderWithTranslation (component: ReactNode) {
      return render(
        <I18nextProvider i18n={i18nForTests}>
          {component}
        </I18nextProvider>
      )
    }


все что делает этв функция она оборачивает тестированный компонент в обертку и  добавляет нужную конфигурацию для переводов

