Налаживает архитектуру в проекте!

Сначал в src создаем папки
    1)entities
        1)providers
            1)router
                index.ts - пустой файл
            2)ThemeProvider
                1) lib
                2) ui
                3) index.ts
        2)styles
        3)types
        App.tsx
    2)features
    3)widgets
    4)shared
        1)config
        2)lib
    5)app
        1)providers
        2)styles
        3)types
            global.d.ts
        App.tsx


И в tsconfig добовляем
    "baseUrl": ".",
    "paths": {
      "*": ["./src/*"]       /// Это будет говорить что все экспорты будут идти из src
    }



Мы установили абсолютные импорты но webpack не вкурсе ою этом
для начала мы гуглим webpack absolute imports - первая ссылка - переходим в resolvemodules

и по туториалу в файл buildResolver мы добавляем

    export function buildResolvers(options: BuildOptions): webpack.ResolveOptions {
        return {
            extensions: ['.tsx', '.ts', '.js'],
            preferAbsolute: true, // ++
            modules: [options.paths.src, 'node_modules'], // ++
            mainFiles: ['index'], // для каждого модуля index будет главным файлом // ++
            alias: {} // ++
        }
    }

так же нужно прокинуть options в buildResolvers для этого в типы добавляем

export interface BuildPaths {
    entry: string;
    build: string;
    html: string;
    src: string; // ++++
}


а в webpack.config.ts

    export default (env: BuildEnv) => {

        const paths: BuildPaths = {
            entry: path.resolve(__dirname, 'src', 'index.tsx'),
            build: path.resolve(__dirname, 'build'),
            html: path.resolve(__dirname, 'public', 'index.html'),
            src: path.resolve(__dirname, 'src') //// ++++++
        }

        const mode = env.mode  || 'development'
        const PORT = env.port || 3000;
        const isDev = mode === 'development';

        const config: webpack.Configuration = buildWebpackConfig({
            mode,
            paths,
            isDev,
            port: PORT
        });

        return config;
    }


И теперь займемся папкой pages
    1) AboutPage
        1)ui
          AboutPage.async.tsx
            AboutPage.tsx
        2) index.ts
     1) MainPage
        1)ui
          MainPage.async.tsx
            MainPage.tsx
        2) index.ts


        index.ts  выглядет так :

        export {AboutPageAsync as AboutPage} from "./ui/AboutPage.async";
         export {MainPageAsync as MainPage} from "./ui/MainPage.async";


Далее в App.tsx мы меняем импорты

    import React, {Suspense, useState} from 'react';
    import './styles/index.scss'
    import {Routes, Route, Link} from "react-router-dom";
    import {classNames} from "shared/lib/classNames/classNames";
    import {useTheme} from "app/providers/ThemeProvider";
    import {AboutPage} from "pages/AboutPage"; // тут
    import {MainPage} from "pages/MainPage"; // тут


    const App = () => {
        const {theme, toggleTheme} = useTheme()

        return (
            <div className={classNames('app', {}, [theme])}>
                <button onClick={toggleTheme}>TOGGLE</button>
                <Link to={'/'}>Главная</Link>
                <Link to={'/about'}>О сайте</Link>
                <Suspense fallback={<div>Loading....</div>}>
                    <Routes>
                        <Route path={'/about'} element={<AboutPage/>}/>
                        <Route path={'/'} element={<MainPage/>}/>
                    </Routes>
                </Suspense>
            </div>
        );
    };

    export default App;